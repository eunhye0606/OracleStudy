SELECT USER
FROM DUAL;
--==>>HR

--■■■ 정규화(Normalization) ■■■--

--○ 정규화란?

--   한 마디로 데이터베이스 서버의 메모리 낭비를 막기 위해
--   어떤 하나의 테이블을.... 식별자를 가지는 여러 개의 테이블로
--   나누는 과정을 말한다.
--   정규화를 한마디로 말하자면 ? 테이블 쪼개기.

--ex) 호석이가...옥장판을 판매한다.
--    고객 리스트 → 거래처 직원 명단이 적혀있는 수첩의 정보를
--                   데이터베이스화 하려고 한다.

-- 테이블명 : 거래처직원
/*
--------------------------------------------------------------------------------
거래처회사명 SELECT USER
FROM DUAL;
SELECT SNAME
              FROM TBL_SAWONBACKUP
              WHERE SANO = 1001
    10Byte       10Byte       10Byte        10Byte    10Byte   10Byte       10Byte
 거래처회사명  회사주소      회사전화    거래처직원명  직급   이메일      휴대폰
--------------------------------------------------------------------------------
    LG       서울여의도    02-345-6789   양윤정   부장    yyj@na..    010-1234-1...
    LG       서울여의도    02-345-6789   최선하   과장    csh@da..    010-2345-2...
    LG       서울여의도    02-345-6789   최문정   대리    cmj@da..    010-3456-3...    
    LG       서울여의도    02-345-6789   홍은혜   부장    heh@gm..    010-5678-5...
    SK       서울소공동    02-987-6543   박현수   부장    phs@na..    010-8585-8...    
    LG       부산동래구    051-5511-5511 오이삭   대리    oys@te..    010-9900-9...
    SK       서울소공동    02-987-6543   정은정   대리    jej@na..    010-2450-8...

가정) 서울 여의도 LG 라는 회사에 근무하는 거래처 직원 명단이
      총 100만 명이라고 가정한다.
      (한 행(레코드)은 70 Byte 이다.)
      
      어느 날... 『서울여의도』에 위치한 LG 본사가 『경기분당』으로
      사옥을 이전하게 되었다.
      회사 주소는 『경기분당』으로 바뀌고,
      회사 전화는 『031-1111-2222』로 바뀌게 되었다.
      
      그러면 ... 100만 명의 회사주소와 회사전화를 변경해야 한다
      
      -- 이 때 수행되어야 할 쿼리문 → UPDATE
      
      UPDATE 거래처직원
      SET 회사주소 = '경기분당', 회사전화 = '031-1111-2222'
      WHERE 거래처회사명 = 'LG'
        AND  회사주소 = '서울여의도';
    
        
      -- WHERE 절로 인해, 100만 개 행을 하드디스크상에서 읽어다가
         메모리에 로드시켜 주어야 한다.
         즉, 100만 * 70Byte 를 모두
         하드디스크상에서 읽어다가 메모리에 로드시켜 주어야 한다는 말이다.
         
         --> 이는 테이블의 설계가 잘못되었으므로
             DB 서버는 조만간 메모리 고갈로 인해 다운될 것이다.
             
             --> 그러므로 정규화 과정을 수행하여 테이블의 잘못된 설계를 바로 잡아야 한다.
    
*/

-- 제 1 정규화
--> 어떤 하나의 테이블에 반복되는 컬럼 값들이 존재한다면
--  값들이 반복되어 나오는 컬럼을 분리하여
--  새로운 테이블을 만들어준다.

--> 제 1 정규화를 수행하는 과정에서 분리된 테이블은
--  !! 반드시 부모 테이블과 자식 테이블의 관계를 갖게 된다. !!

--> 부모 테이블 → 참조받는 컬럼 → PRIMARY KEY 조건 생김
--  자식 테이블 → 참조하는 컬럼 → FOREIGN KEY 조건 생김

--제약조건: 기능이나 행위를 강제한다.
-- ※ 참조받는 컬럼이 갖는 특징
--    반드시 고유한 값(데이터)만 들어와야 한다.
--    중복된 값(데이터)이 없어야 한다.(10번 여러개 X)
--    NULL 이 있어서는 안된다. (NOT NULL 이어야 한다. , 30번 없음 X)

--> 제 1정규화에서 나타나는 특징 !!
--> 제 1 정규화를 수행하는 과정에서
--  부모 테이블의 PRIMARY KEY는 항상 자식 테이블의 FOREIGN KEY로 전이 된다.
/*

-- 테이블명 : 회사 → 부모 테이블
10Byte      10Byte       10Byte       10Byte      
-----------------------------------------------------    
회사ID      거래처회사명  회사주소      회사전화    
======
참조받는 컬럼 → P.K 제약조건을 가짐.
-----------------------------------------------------
  10             LG       서울여의도    02-345-6789    
  20             SK       서울소공동    02-987-6543       
  30             LG       부산동래구    051-5511-5511 
-----------------------------------------------------


-- 테이블명 : 직원 → 자식 테이블
     10Byte      10Byte  10Byte  10Byte         10Byte
--------------------------------------------------------
    거래처직원명  직급   이메일   휴대폰        회사ID
                                                ------
                                                참조하는 컬럼 → F.K 제약조건
---------------------------------------------------------
    양윤정   부장    yyj@na..    010-1234-1...    10
    최선하   과장    csh@da..    010-2345-2...    10
    최문정   대리    cmj@da..    010-3456-3...    10
    홍은혜   부장    heh@gm..    010-5678-5...    10
    박현수   부장    phs@na..    010-8585-8...    20
    오이삭   대리    oys@te..    010-9900-9...    30 
    정은정   대리    jej@na..    010-2450-8...    20
---------------------------------------------------------
*/

/*
-- 테이블이 분리(분할)되기 이전 상태로 조회(왜 UNION이 아니라 JOIN인가????)
SELECT A.거래처회사명, A.회사주소, A.회사전화
      ,B.거래처직원명, B.직급, B.이메일, B.휴대폰
FROM 회사 A, 직원 B
WHERE A.회사ID = B.회사.ID;
*/

/*
가정) 서울 여의도 LG 라는 회사에 근무하는 거래처 직원 명단이
      총 100만 명이라고 가정한다.
      
       그러면 ... 1개의 회사주소와 회사전화를 변경해야 한다
       (회사테이블의 LG레코드만 변경.)
       
       -- 이 때 수행되어야 할 쿼리문 → UPDATE
      
      UPDATE 회사
      SET 회사주소 = '경기분당', 회사전화 = '031-1111-2222'
      WHERE 회사ID = 10;
      
      -- WHERE 절로 인해, 1개 행을 하드디스크상에서 읽어다가
         메모리에 로드시켜 주어야 한다.
         즉, 1 * 0Byte 를 모두
         하드디스크상에서 읽어다가 메모리에 로드시켜 주어야 한다는 말이다.
         
    --> !! 정규화 이전에는 100만 건을 처리해야 할 업무에서
           1 건만 처리하면 되는 업무로 바뀐 상황이기 때문에
           DB 서버는 메모리 고갈이 일어나지 않고 아주 빠르게 처리 될 것이다. !!
 
??? 원래는 7개의 컬럼 → 두 테이블로 분리되면서 각각 식별자컬럼때문에 
    회사(40 Byte) , 직원(50Byte) 
    이것은 영향을 안주나 ???

*/
--------------------------------------------------------------------------------
-- 거래처 회사명, 회사전화
SELECT 거래처회사명, 회사전화
FROM 회사;
--> WHERE 조건절이 없으면 FROM절로 풀스캔.
--> 3 * 40Byte 가 메모리에 올라감 (레코드개수 * 컬럼바이트)

-- 제 1 정규화 전
SELECT 거래처회사명, 회사전화
FROM 거래처직원;
--> 200만 * 70Byte


--거래처직원명, 직급
SELECT 거래처직원명, 직급
FROM 직원;
--> 200만 * 50 Byte

-- 제 1 정규화 전
SELECT 거래처직원명, 직급
FROM 거래처직원;
--> 200만 * 70Byte


-- 거래처회사명, 거래처직원명
SELECT A.회사명, B.직원명
FROM 회사 A JOIN 직원 B
ON A.회사ID = B.회사ID;
--> 3 * 10 Byte + 200만 * 10Byte(땡~!!) (ON절 XX FROM절 풀스캔)
-- (3 * 40Byte) + (200만 * 50Byte) (정답 ~!!!) 
-- WHERE절만 올라가지만 결합조건은 전부가 올라가
/*
<<<<으네가 헷갈리는 부분>>>>>
이제 이해 됩니다 ~!!!!!!!!!!
SELECT 거래처회사명, 회사전화
FROM 회사
WHERE 회사ID = 10;
--> 1 * 40Byte (컬럼의 갯수는 의미없다. 회사테이블전체..)
!! 앞에 곱해지는 레코드 수만 달라져 !! WHERE 절 !! 
선택조건 일때만 임 ~~!!! 
결합조건 XXXXXX 얜 풀스캔임!!
*/
-- 제 1 정규화 전
SELECT 거래처직원명, 직급
FROM 거래처직원;
--> 200만 * 70Byte







--------------------------------------------------------------------------------
-- 테이블명 : 주문(1정규화 끝난상태)
--Q. 어느 컬럼에다가 PK제약조건을 달아야 할까?
--A. PK 제약조건은 고유한 값과 NOT NULL이다.
--   제품코드, 주문일자, 주문수량은 중복해서 데이터가 들어올 수 있다.
--   그러므로 고유한 값을 가질 수 있는 『고객ID』가 PK제약조건을 달아야한다.

--> 최선의 방법은 고객ID + 제품코드 + 주문일자 이다.

/*
----------------------------------------------------------------------
 고객ID           제품코드            주문일자            주문수량
----------------------------------------------------------------------
 HEH1217(홍은혜)  P-KKBK(꿀꽈배기)    2022-03-01 13:50:23   10
 CMJ8335(최문정)  P-KKDS(쿠크다스)    2022-03-01 14:15:11   24
 LHS3235(이호석)  P-CCPI(초코파이)    2022-03-01 16:14:36   12
 PHS5834(홍은혜)  P-MGRT(마가레트)    2022-03-01 10:20:54   20
 LSM1124(임소민)  P-KSTD(카스타드)    2022-03-02 11:32:47   30
                            :
----------------------------------------------------------------------
*/
-- 
--※ 하나의 테이블에 존재하는 PRIMARY KEY의 최대 갯수는 1개이다.
--   하지만, PRIMARY KEY를 이루는(구성하는) 컬럼의 갯수는 복수(여러개)인 것이 가능하다.
--   컬럼 1개로만 구성된 PRIMARY KEY 를 SINGLE PRIMARY KEY 라고 부른다.
--   (단일 프라이머리 키)
--   두 개 이상의 컬럼으로 구성된 PRIMARY KEY 를 COMPOSITE PRIMARY KEY라고 부른다.
--   (복합 프라이머리 키)

-- 제 2 정규화
--> 제 1 정규화를 마친 결과물에서 PRIMARY KEY가 SINGLE COLUMN 이라면
--  제 2 정규화는 수행하지 않는다.
-- 하지만 PRIMARY KEY 가 COMPOSITE COLUMN 이라면
-- 반.드.시 제 2 정규화를 수행해야 한다.

-- 즉, 제 1정규화는 모든 테이블이 대상.
-- 제 1 정규화 이후 테이블은 늘어났쥬
-- 제 1 정규화 이후 결과물에 따라 다름.
-- 제 2 정규화는 모든 테이블이 아니라 복합 프라이머리 키로 구성된 테이블만!

--> 식별자가 아닌 컬럼은 식별자 전체 컬럼에 대해 『의존적』이어야 하는데
--  식별자가 전체 컬럼이 아닌 일부 식별자 컬럼에 대해서만 의존적이라면
-- 이를 분리하여 새로운 테이블을 생성해준다.
-- 이 과정을 제 2 정규화라 한다.

/*

-- 제 1 정규화 이후, 부모 테이블은 ? 과목(과목번호 + 교수번호, PK)
--                   자식 테이블은 ? 점수
-- 부모 테이블의 PK → 자식 테이블의 FK로 전이된다.
--                   
-- 테이블명 : 과목
---------------------------------------------------------------------------------
과목번호   과목명   교수번호   교수자명    강의실코드           강의실설명
========            ========
            PK
식별자     식별자X    식별자     식별자X     식별자X             식별자X
--식별자 여러개.
--의존적이다 : 식별자가 바뀌면 같이 바뀐다.
--             BUT 복합 프라이머리 키 둘 다에게 의존적인게 아니라
--                 하나에만 의존적이면 테이블분리한다.
---------------------------------------------------------------------------------
 J0101     자바기초    21      슈바이처       A301       전산실습관 3층 40석 규모
 J0102     자바중급    22      테슬라         T502       전자공학관 5층 60석 규모
 01123     오라클중급  22      테슬라         A201       전산실습관 2층 30석 규모
 01150     오라클심화  10      장영실         T502       전자공학관 5층 60석 규모
 J3342     JSP응용     20      맥스웰         K101       인문과학관 1층 90석 규모
---------------------------------------------------------------------------------

-- 테이블명 : 점수
------------------------------------------------
과목번호       교수번호       학번          점수
-----------------------
          FK
========                    ========
                PK
------------------------------------------------
 01123           22       2212316(우수정)    80
 01123           22       2212318(김정용)    92
 01123           22       2212319(양윤정)    76
 01123           22       2212323(한충희)    88
                        :
 J0101           21       2212316(우수정)    99
                        :
------------------------------------------------

*/


--------------------------------------------------------------------------------

-- 제 3 정규화
--> 식별자가 아닌 컬럼이 식별자가 아닌 컬럼에 의존적인 상황이라면
--  이를 분리하여 새로운 테이블을 생성해 주어야 한다.
--  이 과정을 제 3 정규형이라고 한다.

/*
-- 테이블명 : 과목
---------------------------------------------------------------------------------
과목번호   과목명   교수번호   교수자명    강의실코드           강의실설명
========            ========    
            PK
                                           ---------------------------------
                                           식별자 아닌 컬럼이 식별자 아닌 컬럼
                                           에게 의존하는 상황.
---------------------------------------------------------------------------------
 J0101     자바기초    21      슈바이처       A301       전산실습관 3층 40석 규모
 J0102     자바중급    22      테슬라         T502       전자공학관 5층 60석 규모
 01123     오라클중급  22      테슬라         A201       전산실습관 2층 30석 규모
 01150     오라클심화  10      장영실         T502       전자공학관 5층 60석 규모
 J3342     JSP응용     20      맥스웰         K101       인문과학관 1층 90석 규모
---------------------------------------------------------------------------------
*/

--※ 관계(Relation)의 종류

--   1    : many 관계 ( 1 : 다 관계)
-->  제 1 정규화를 적용하여 수행을 마친 결과물에서 나타나는 바람직한 관계.
--   관계형 데이터베이스를 활용하는 과정에서 추구해야 하는 과제.
--   ☆ 부모 - 자식 구분 확실한 방법 : 1 : 다 관계

--   1    : 1    관계 ( 1 : 1  관계)
-->  논리적, 물리적으로 존재할 수 있는 관계이긴 하지만
--   관계형 데이터베이스 설계 과정에서 가급적이면 피해야 할 관계.
--   ex)
--      학생 테이블                  점수테이블
---------------------------          -----------------------------------------
--      학번 이름 전화 주소          학번 국어점수 영어점수 수학점수 과학점수
---------------------------          -----------------------------------------
--      7369 홍길동 .......          7369 .......           ........ .........

---------------------------          -----------------------------------------

--   many : many 관계 (다 : 다 관계)
-->  논리적인 모델링에서는 존재할 수 있지만
--   실제 물리적인 모델링에서는 존재할 수 없는 관계.
--   !!final 프로젝트에서 주의해야 하는 부분 !!

/*
--테이블명 : 고객                     -- 테이블명 : 제품
-------------------------------       --------------------------------------
고객번호 고객명 이메일 전화번호       제품번호 제품명 제품단가 제품설명.....
-------------------------------       --------------------------------------
1001     최선하 csh@t.. 010....       pkdlek    새우깡      600   새우가 들어..
1002     김상기 ksk@t.. 010....       wkfkfc    자갈치      500   자갈이 들어..
1003     박현지 phj@t.. 010....       rkawkr    감자깡      400   감자가 들어..
1004     한충희 hch@t.. 010....       rhranak   고구마깡    400   고구마 들어..
            :                                           :
-------------------------------       --------------------------------------
*/


